[{"categories":["技术"],"content":"配置Docker Mailserver 下载配置文件，要对docker-compose.yml稍作修改，添加邮件中继。 DMS_GITHUB_URL='https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master' wget \"${DMS_GITHUB_URL}/docker-compose.yml\" wget \"${DMS_GITHUB_URL}/mailserver.env\" # wget \"${DMS_GITHUB_URL}/setup.sh\" # chmod a+x ./setup.sh 完整配置文件如下，其中\u003c\u003e内的信息自行替换，mailserver.env为之前下载的原始文件，没有修改。 如果是裸域安装，就在hostname内直接填写\u003cdomain\u003e.\u003ctld\u003e。 手动配置ssl，调用服务器配置的ssl文件，其他方法参考官方文档。 为避免垃圾邮件泛滥，大部分服务器提供商通常会封锁25端口出站流量，不能直接发邮件，因此配置Mailgun作为邮件中继发件。 第26行和第29、30行证书位置自行替换为对应位置。 自签名证书直接套用此配置会报错，需另外配置，可去官方文档自行查询。 version: \"3\" services: mailserver: image: mailserver/docker-mailserver:11.3.1 container_name: mailserver # If the FQDN for your mail-server is only two labels (eg: example.com), # you can assign this entirely to `hostname` and remove `domainname`. hostname: \u003chostname\u003e domainname: \u003cdomain\u003e.\u003ctld\u003e env_file: mailserver.env # More information about the mail-server ports: # https://docker-mailserver.github.io/docker-mailserver/edge/config/security/understanding-the-ports/ # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks. ports: - \"25:25\" # SMTP (explicit TLS =\u003e STARTTLS) - \"143:143\" # IMAP4 (explicit TLS =\u003e STARTTLS) - \"465:465\" # ESMTP (implicit TLS) - \"587:587\" # ESMTP (explicit TLS =\u003e STARTTLS) - \"993:993\" # IMAP4 (implicit TLS) volumes: - ./mail-data/:/var/mail/ - ./mail-state/:/var/mail-state/ - ./mail-logs/:/var/log/mail/ - ./config/:/tmp/docker-mailserver/ - /etc/localtime:/etc/localtime:ro - /etc/nginx/ssl/:/etc/letsencrypt/:ro environment: - SSL_TYPE=manual - SSL_CERT_PATH=/etc/letsencrypt/certs/\u003ccert\u003e.cer - SSL_KEY_PATH=/etc/letsencrypt/private/\u003cprivate\u003e.key - ENABLE_SPAMASSASSIN=1 - ENABLE_FAIL2BAN=1 - POSTFIX_MESSAGE_SIZE_LIMIT=20971520 # 20M - UPDATE_CHECK_INTERVAL=7d - RELAY_HOST=smtp.mailgun.org - RELAY_PORT=587 - RELAY_USER=\u003cuser\u003e - RELAY_PASSWORD=\u003cpassword\u003e restart: always stop_grace_period: 1m healthcheck: test: \"ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1\" timeout: 3s retries: 0 15-mailboxes.conf为自定义邮箱文件夹配置，主要添加了存档文件夹，放在”./config/dovecot”下，也可以自行修改。 ## ## Mailbox definitions ## # Each mailbox is specified in a separate mailbox section. The section name # specifies the mailbox name. If it has spaces, you can put the name # \"in quotes\". These sections can contain the following mailbox settings: # # auto: # Indicates whether the mailbox with this name is automatically created # implicitly when it is first accessed. The user can also be automatically # subscribed to the mailbox after creation. The following values are # defined for this setting: # # no - Never created automatically. # create - Automatically created, but no automatic subscription. # subscribe - Automatically created and subscribed. # # special_use: # A space-separated list of SPECIAL-USE flags (RFC 6154) to use for the # mailbox. There are no validity checks, so you could specify anything # you want in here, but it's not a good idea to use flags other than the # standard ones specified in the RFC: # # \\All - This (virtual) mailbox presents all messages in the # user's message store. # \\Archive - This mailbox is used to archive messages. # \\Drafts - This mailbox is used to hold draft messages. # \\Flagged - This (virtual) mailbox presents all messages in the # user's message store marked with the IMAP \\Flagged flag. # \\Important - This (virtual) mailbox presents all messages in the # user's message store deemed important to user. # \\Junk - This mailbox is where messages deemed to be junk mail # are held. # \\Sent - This mailbox is used to hold copies of messages that # have been sent. # \\Trash - This mailbox is used to hold messages that have been # deleted. # # comment: # Defines a default comment or note associated with the mailbox. This # value is accessible through the IMAP METADATA mailbox entries # \"/shared/comment\" and \"/private/comment\". Users with sufficient # privileges can override the default value for entries with a custom # value. # NOTE: Assumes \"namespace inbox\"","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:1:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"配置DNS和防火墙 ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:2:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"DNS配置 裸域安装是没有必要的，无论是不是裸域，邮件后缀@\u003cdomain\u003e.\u003ctld\u003e都能够收到。 但是裸域安装要在”./config”文件夹下添加配置文件”postfix-main.cf”，加入以下内容，官方文档有写。 mydestination = localhost.$mydomain, localhost 关键在于MX解析的配置。 以邮件服务器域名为mail.\u003cdomain\u003e.\u003ctld\u003e为例，配置A解析mail到服务器ip地址，配置MX解析 \u003cdomain\u003e.\u003ctld\u003e到mail.\u003cdomain\u003e.\u003ctld\u003e，优先级设置为10，这样就保证了发往@\u003cdomain\u003e.\u003ctld\u003e的邮件能够到达。 生成DKIM等配置由于采用了邮件中继，因此直接使用邮件中继提供的内容即可，无需自行配置。以Mailgun为例，位于Sending \u003e Domain settings \u003e DNS records处。添加这些DNS记录是较为必要的，保证了邮件的送达率。 注意，MX记录不要按照Mailgun给出的配置，其配置将收件指向Mailgun。 ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:2:1","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"防火墙 防火墙方面，25端口需要开放才能收到邮件。143端口为未加密IMAP，可以不开放。465端口和587端口为加密SMTP端口，建议开放。993端口为加密IMAP端口，建议开放。 ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:2:2","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"用户管理 这里列出了创建用户，添加别名，设置邮件配额的基本方法。 # 添加用户 docker exec -it mailserver setup email add \u003cuser\u003e@\u003cdomain\u003e.\u003ctld\u003e \u003cpassword\u003e # 创建用户别名 docker exec -it mailserver setup alias add \u003calias\u003e@\u003cdomain\u003e.\u003ctld\u003e \u003cuser\u003e@\u003cdomain\u003e.\u003ctld\u003e # 设置邮件配额 docker exec -it mailserver setup quota set \u003cuser\u003e@\u003cdomain\u003e.\u003ctld\u003e 2G 更详细的内容自行查看官方文档。 ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:3:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"小插曲 使用一段时间后我查看log，发现有个ip一直在尝试破解登录我的邮箱，尝试了不同的用户名。遇到这样的情况，我们可以使用内置的fail2ban工具手动ban掉他的ip。 启用/重启fail2ban工具。 docker exec -it mailserver supervisorctl restart fail2ban Ban掉指定ip地址。 docker exec -it mailserver setup fail2ban ban 45.128.234.165 # 取消禁令 # docker exec -it mailserver setup fail2ban unban 45.128.234.165 ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:4:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"安装Roundcube Webmail roundcube是一个网络邮件客户端，可以通过如下配置文件安装。 假定Docker Mailserver服务器的域名为mail.\u003cdomain\u003e.\u003ctld\u003e。 在环境中指定IMAP和SMTP端口，设置附件最大文件大小。也可采用mysql等数据库作为后端，但不是特别必要。 version: '3' services: roundcube: image: roundcube/roundcubemail:1.6.x-apache container_name: roundcube restart: unless-stopped volumes: - ./data:/var/www/html - ./db/sqlite:/var/roundcube/db - ./config:/var/roundcube/config ports: - \u003cport\u003e:80 environment: - ROUNDCUBEMAIL_DB_TYPE=sqlite - ROUNDCUBEMAIL_SKIN=elastic - ROUNDCUBEMAIL_DEFAULT_HOST=ssl://mail.\u003cdomain\u003e.\u003ctld\u003e - ROUNDCUBEMAIL_DEFAULT_PORT=993 - ROUNDCUBEMAIL_SMTP_SERVER=ssl://mail.\u003cdomain\u003e.\u003ctld\u003e - ROUNDCUBEMAIL_SMTP_PORT=465 - ROUNDCUBEMAIL_UPLOAD_MAX_FILESIZE=20M 配置Apache2或Nginx等http服务器通过SSL反向代理到端口是更安全的。这里给出一个Nginx的例子，按照实际情况修改。 server { listen 80; listen [::]:80; server_name \u003chost\u003e.\u003cdomain\u003e.\u003ctld\u003e; return 301 https://$server_name$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name \u003chost\u003e.\u003cdomain\u003e.\u003ctld\u003e; client_max_body_size 20m; ssl_certificate /etc/nginx/ssl/certs/*.\u003cdomain\u003e.\u003ctld\u003e-fullchain.cer; ssl_certificate_key /etc/nginx/ssl/private/*.\u003cdomain\u003e.\u003ctld\u003e.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:\u003cport\u003e/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_cache_bypass $http_upgrade; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } access_log /var/log/nginx/webmail.access.log; error_log /var/log/nginx/webmail.error.log; } ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:5:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"一些链接 docker-mailserver官方文档：https://docker-mailserver.github.io/docker-mailserver/v10.0/introduction/ docker-mailserver托管地址：https://github.com/docker-mailserver/docker-mailserver roundcube-docker托管地址：https://github.com/roundcube/roundcubemail-docker ","date":"2022-12-24","objectID":"/docker-mailserver-and-roundcube-webmail/:6:0","tags":["Docker","Mail"],"title":"使用Docker Mailserver搭建邮件服务器并用Roundcube Webmail管理","uri":"/docker-mailserver-and-roundcube-webmail/"},{"categories":["技术"],"content":"方案一：修改镜像源 这个方法在csdn、知乎那些地方说得太多了，我相信大部分人搜索到的第一个方法就是这个。尽管如此我还是重新说一下方法。 编辑配置文件，如果文件不存在，以下命令会自动创建。 sudo nano /etc/docker/daemon.json 将配置信息粘贴到配置文件中，配置信息为 json 格式，可以根据实际需要设置多个国内的镜像服务器。 分别对应Github、阿里云、docker官方中国镜像、网易云、和百度云的源。 需要特别注意的是，第二个阿里云的源需要自己到【阿里云】的【容器镜像服务】处获取。 实践表明其实前两个源就够用了，阿里云的源相当不错，而Github的源在部分情况下比阿里云的源好用。 { \"registry-mirrors\": [ \"https://ghcr.io\", \"https://5yt01a9i.mirror.aliyuncs.com\", \"https://registry.docker-cn.com\", \"http://hub-mirror.c.163.com\", \"https://mirror.baidubce.com\" ] } 刷新docker源. sudo systemctl daemon-reload sudo systemctl restart docker 查看docker源是否更新成功。 sudo docker info ","date":"2022-11-20","objectID":"/solutions-for-docker-stuck-on-pull/:1:0","tags":["Linux","Docker"],"title":"docker镜像下载慢/失败的解决方法 ","uri":"/solutions-for-docker-stuck-on-pull/"},{"categories":["技术"],"content":"方案二：有网络的地方下载后上传/同步到目标服务器 这也是我写这篇博客的目的。 一方面如果你在玩一些很新的东西，比如说Firefly III的docker镜像，我在国内服务器上尝试了所有我知道的源后都没有顺利pull下来。另一方面如果你的机器不方便联网，那么可以试试下面说的本地转存的方法。 假定国内服务器为Server A，国外服务器为Server B。理论上Server B为你自己的电脑也行，只要能连接到Docker的网站，但我没有测试过。 我在DigitalOcean上还有一台学生机，而这台Server B连接Docker相当顺畅。首先在Server B上使用下列命令拉取镜像，查看镜像ID。 # Server B export Docker_Image=******/****:*** # export Docker_Image=fireflyiii/core:version-5.7.18 docker pull ${Docker_Image} docker image ls 得到镜像id后，将镜像保存为tar文件。其中\u003cid\u003e替换为镜像id，\u003cdir\u003e/\u003cfile_name\u003e.tar替换为保存在Server B上的路径。 # Server B docker save -o \u003cdir\u003e/\u003cfile_name\u003e.tar \u003cid\u003e 使用SFTP工具将Serve B上的tar文件转移到Server A上，在Server A上解压读取docker镜像。 # Server A docker load \u003c \u003cdir\u003e/\u003cfile_name\u003e.tar 用docker image ls查看镜像id。 # Server A docker image ls 为刚刚导入的docker镜像添加镜像名和标签。其中\u003cid\u003e替换为镜像id。 # Server A export Docker_Image=******/****:*** # export Docker_Image=fireflyiii/core:version-5.7.18 docker tag \u003cid\u003e ${Docker_Image} 后续在Server A上就可以正常使用docker-compose等命令读取和操作镜像了。 ","date":"2022-11-20","objectID":"/solutions-for-docker-stuck-on-pull/:2:0","tags":["Linux","Docker"],"title":"docker镜像下载慢/失败的解决方法 ","uri":"/solutions-for-docker-stuck-on-pull/"},{"categories":["技术"],"content":"引言 我猜测看到这篇文章的朋友，可能很多连什么是bitwarden都不知道。不着急，我们先从密码管理开始讲起。 如今我们每天有大量的时间在网上冲浪，几乎是个网站都会要求你提供一个用户名和密码，基于此为你创建一个账户。在这样的环境背景下，一个人所拥有的网络账户中当然会包括微信、Paypal这类的高价值账户。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:1:0","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"假设分析 现在假设某个人的密码管理情况如下： 这个人在几乎所有网站使用同一个密码。 这个人使用不同的密码，并亲自记忆。 这个人使用不同的密码，并通过密码管理器在不同网站随机生成密码并记录。 我们对每一种情况进行分析： ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:2:0","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"情形1 密码足够复杂。即便大型公司的密码库安全性足够强，仍有可能某一天你在某个不知名小网站上使用的密码出卖了你，让你常用的密码暴露在黑客本人和他售卖密码库的对象手中。而密码库获得者可以通过撞库的方式，利用你在不知名网站上泄露的密码尝试登录你在其他网站的账户，从而窃取个人信息甚至盗窃财产。而这里的“即便”甚至都不一定成立，即使安全如LastPass（后文会讲），仍有密码泄露时间传出。 密码不够复杂。这里的“不够复杂”包括如下可能性：密码过短，密码过于简单，密码使用了个人信息。 密码过短。可以直接用暴力破解方式破解，也就是直接通过足够多次输入取得正确的密码。 密码过于简单。指使用常见词汇来组成密码。如“password”这个次尽管有8位长，但密码破解者只需要几次输入就能得到，因为它是“常见密码榜单”前五的固定客户。请确保你的密码不在常见密码榜单内。 密码使用了个人信息。诸如姓名，生日，甚至你家猫的名字都很容易从公开社交网络和媒体获得，将它们作为数字或者字符应用到密码中会增加被直接猜中的风险。 需要注意的是，试图获取密码的人可能会将上述方法结合使用。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:2:1","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"情形2 一种常用的技巧是替换。如密码格式为”#########”，其中#####代表密码前缀，而根据不同网站替换。 例：将”platinum3776NGA”作为NGA论坛账户的密码，将”platinum3776baidu”作为百度账户的密码。 这也是一种较为可行的策略，较单一密码安全。只是一个初步的例子，你可以探索更加高阶的技巧。 如果你足够强大，用脑子记，我没什么可说的。请注意保养头发。请不要忘记重要密码。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:2:2","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"情形3 iCloud钥匙串，Edge密码管理，Google Chrome都有密码管理服务，但在诸如Steam、Epic等非浏览器客户端登录时就不太方便了。这也是笔者不全面依靠浏览器进行密码管理的原因。另一方面，浏览器仅保存密码，在保存诸如Matlab、Tableau注册码等方面不够方便。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:2:3","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"其他tips 最最重要的是，不要将重要网站的密码和不重要网站（安全性难以保证）的密码混用。 对于不重要的网站，如果只是因为必须要登入账户，密码丢失也几乎没有任何损失，那么完全可以采用毫无防备的密码。 根据密码学，极弱密码比不设密码更加不安全。 为什么手机PIN码足够短却相对安全？通过限制输入次数的方式，如5次失败输入后会锁定30秒，来防止足够多的输入。即便如此，我们仍然建议定期和不定期的更换PIN码。 建议重要密码使用KeePass，或iCloud钥匙串、Google Chrome等加密方式留存一个备份。不要明文存储备份，如果仅用于导入导出，用后就删除。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:3:0","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"关于Bitwarden以及其他一些密码管理器 Bitwarden本身是开源项目，托管在GitHub上。但由于Bitwarden采用Microsoft SQL作为后端，对服务器的性能要求较高，小规模部署多采用同样托管在GitHub上的较为轻量化的项目Vaultwarden。笔者的服务器托管也采用Vaultwarden实现。Bitwarden与Vaultwarden使用同样的客户端（包括安卓，IOS，Linux和Windows多系统）和网页版，因此除小部分企业功能外，食用体验并无差别。（具体差别可参考Vaultwarden在Github托管页首页的介绍） 在使用第三方托管服务器部署时，请将左上角的URL替换为托管网址。 Bitwarden官方（疑似被墙）也提供免费的密码托管服务，付费用户（单人$10/year，家庭$3.33/month）可使用高级功能。 最知名且好评率最高的密码管理器当属1password，闭源商业软件，$2.99/month单人的价格（国内好像有￥99/年的代理）让笔者望而却步，流下了贫穷的眼泪。如果有条件欢迎为笔者提供评测。其他较为知名的密码管理还有LastPass，2021年3月16日后不再提供免费跨端同步，现在高级版售价$3/month。LastPass有过泄密传闻，笔者不考虑。 几乎所有密码管理软件都采用或至少包括AES-256算法的加密方式，根据密码学知识，暴力破解是接近不可能的，除非有划时代技术（如量子计算机）出现。所有密码管理器，无论本地还是云端密码数据库，也仅会存储加密数据库，绝对不会存储密码明文。Bitwarden官方文档显示，密码库加解密均在本地进行，服务器仅保存加密后的数据库。因此，即使管理者也同样绝对不可能解密你的密码数据库，除非你提供密钥。这同样意味着，如果你丢失了主密钥（解密数据库密钥），你的数据将会几乎永远永远的丢失。请务必牢记。 如果对于托管在服务器上的密码管理软件不放心，还有一些其他选项留个喜欢折腾的朋友。笔者在搭建Bitwarden服务器之前使用过半年的Keepass，也是开源软件，转到Bitwarden的最大原因是客户端界面太丑。Windows桌面端可以用KeepassXC，界面比较现代，现在笔者将它作为备份使用。安卓端Keepass2Android同样功能完善，但太绿了。Keepass数据库完全存在本地，可以通过Webdev云盘（如微软Ondrive）自行同步多平台数据库。 ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:4:0","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":["技术"],"content":"一些链接 Vaultwarden托管地址：https://github.com/dani-garcia/vaultwarden Bitwarden托管地址：https://github.com/bitwarden/web Bitwarden官网：https://bitwarden.com/ ","date":"2022-01-28","objectID":"/how-to-use-bitwarden/:5:0","tags":["安全"],"title":"如何食用Bitwarden密码管理","uri":"/how-to-use-bitwarden/"},{"categories":[],"content":"hello, world. ","date":"2022-01-02","objectID":"/first-post/:0:0","tags":[],"title":"第一篇文章","uri":"/first-post/"},{"categories":null,"content":"这里是AK 我是西南财经大学的一个普通学生。 搭建这个博客主要是为了好玩。 感谢你的驻足。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"时间轴 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:0","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2021.12.11 获得Digitalocean的学生优惠，初次使用服务器。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:1","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2021.12.21 获得并启用chenry.me域名。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:2","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2021.12.27 考虑国内访问速度，购入阿里云轻量服务器主机。事实证明买小了。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:3","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.3.14 经过长时间对线，获得Azure学生包，计划转向Azure。 Auzre服务器计划托管国外站点。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:4","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.4.21 站长20岁了。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:5","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.5.5 国内网址备案通过，上线国内站点。 国外网站使用频率降低，逐渐转向国内。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:6","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.11.20 出于性能原因放弃Wordpress，转而使用hugo重新搭建站点。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:7","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.11.26 误操作删库，还好最近一次备份是11月22日。用了一晚上恢复数据。考虑使用cron定时发送数据到webdev云盘。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:8","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"2022.11.30 苟利国家生死以，岂因祸福避趋之。 ","date":"0001-01-01","objectID":"/little-site-big-news/:1:9","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"目前在线且开放的self-hosting列表 ","date":"0001-01-01","objectID":"/little-site-big-news/:2:0","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"Hugo博客 https://chenrenyu.com ","date":"0001-01-01","objectID":"/little-site-big-news/:2:1","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"Nextcloud https://cloud.chenrenyu.com ","date":"0001-01-01","objectID":"/little-site-big-news/:2:2","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"贴吧云签到 https://tieba.chenrenyu.com ","date":"0001-01-01","objectID":"/little-site-big-news/:2:3","tags":null,"title":"小站大事记","uri":"/little-site-big-news/"},{"categories":null,"content":"与我联系 ","date":"0001-01-01","objectID":"/contact/:1:0","tags":null,"title":"联系","uri":"/contact/"},{"categories":null,"content":"邮箱 inbox@chenrenyu.com 邮件请注明来意，我会回信。 ","date":"0001-01-01","objectID":"/contact/:1:1","tags":null,"title":"联系","uri":"/contact/"},{"categories":null,"content":"QQ 1175364758 QQ请备注，我看到了会给你回复。 ","date":"0001-01-01","objectID":"/contact/:1:2","tags":null,"title":"联系","uri":"/contact/"}]